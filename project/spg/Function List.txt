

// MISC

void        SPG_Lock(bool enable)
Uint8       SPG_GetLock()
void        SPG_PushState(int state)
int         SPG_PopState()
void        SPG_BlitSurfaceAlpha(bool enable)
bool        SPG_GetBlitSurfaceAlpha()
Uint32      SPG_MixAlpha(SDL_Surface *surface, Uint32 color, Uint8 alpha)
int         SPG_Clamp(int value, int min, int max)
SDL_Rect    SPG_MakeRect(int x, int y, int w, int h)
SDL_Rect    SPG_MakeRectRelative(int x, int y, int x2, int y2)
Uint32	SPG_Map(SDL_Surface* surface, Uint8 r, Uint8 g, Uint8 b)
Uint32	SPG_MapAlpha(SDL_Surface* surface, Uint8 r, Uint8 g, Uint8 b, Uint8 a)


// PALETTE

SDL_Color   SPG_ToColor(Uint8 R, Uint8 G, Uint8 B)
SDL_Color   SPG_GetColor(SDL_Surface *Surface, Uint32 Color)
void        SPG_Fader(SDL_Surface *surface, Uint8 sR,Uint8 sG,Uint8 sB, Uint8 dR,Uint8 dG,Uint8 dB,Uint32 *ctab,int start, int stop)
void        SPG_AlphaFader(Uint8 sR,Uint8 sG,Uint8 sB,Uint8 sA, Uint8 dR,Uint8 dG,Uint8 dB,Uint8 dA, Uint32 *ctab,int start, int stop)
void        SPG_SetupRainbowPalette(SDL_Surface *surface,Uint32 *ctab,int intensity, int start, int stop)
void        SPG_SetupBWPalette(SDL_Surface *surface,Uint32 *ctab,int start, int stop)


// SURFACE

Uint32          SPG_GetPixel(SDL_Surface *surface, Sint16 x, Sint16 y)

int             SPG_Blit(SDL_Surface *Src, SDL_Rect* srcRect, SDL_Surface *Dest, SDL_Rect* destRect)
void            SPG_Draw(SDL_Surface* source, SDL_Surface* dest, int x, int y)
void            SPG_DrawBlit(SDL_Surface* img, SDL_Surface* dest, int x, int y)

SDL_Surface*    SPG_CreateAlphaSurface(Uint32 flags, int width, int height)
SDL_Surface*    SPG_CreateAlphaSurfaceFrom(void* linearArray, int width, int height, SDL_PixelFormat* format)
SDL_Surface*    SPG_CopySurface(SDL_Surface *src)
SDL_Surface*    SPG_DisplayFormatAlpha(SDL_Surface* surf)

void            SPG_SetSurfaceAlpha(SDL_Surface* surface, Uint8 alpha)
void            SPG_SetColorkey(SDL_Surface* img, Uint32 color)
void            SPG_SetClip(SDL_Surface* surface, SDL_Rect& rect)
void            SPG_RestoreClip(SDL_Surface* surface)

SDL_Rect        SPG_TransformSurface(SDL_Surface *src, SDL_Surface *dst, float angle, float xscale, float yscale, Uint16 px, Uint16 py, Uint16 qx, Uint16 qy, Uint8 flags)
SDL_Surface*    SPG_Transform(SDL_Surface *src, Uint32 bcol, float angle, float xscale, float yscale, Uint8 flags)

SDL_Surface*    SPG_Rotate(SDL_Surface *src, float angle, Uint32 bcol = 0)
SDL_Surface*    SPG_RotateAA(SDL_Surface *src, float angle, Uint32 bcol = 0)
SDL_Surface*    SPG_Scale(SDL_Surface *src, float xscale, float yscale, Uint32 bcol = 0)
SDL_Surface*    SPG_ScaleAA(SDL_Surface *src, float xscale, float yscale, Uint32 bcol = 0)




// DRAWING

void SPG_BlockWrite8(SDL_Surface *Surface, Uint8 *block, Sint16 y)
void SPG_BlockWrite16(SDL_Surface *Surface, Uint16 *block, Sint16 y)
void SPG_BlockWrite32(SDL_Surface *Surface, Uint32 *block, Sint16 y)
void SPG_BlockRead8(SDL_Surface *Surface, Uint8 *block, Sint16 y)
void SPG_BlockRead16(SDL_Surface *Surface, Uint16 *block, Sint16 y)
void SPG_BlockRead32(SDL_Surface *Surface, Uint32 *block, Sint16 y)

void SPG_Fill(SDL_Surface *surface, Uint32 color)
void SPG_FillAlpha(SDL_Surface *surface, Uint32 color, Uint8 alpha)

void SPG_FloodFill(SDL_Surface *dst, Sint16 x, Sint16 y, Uint32 color)

void SPG_Pixel(SDL_Surface *surface, Sint16 x, Sint16 y, Uint32 color)
void SPG_PixelBlend(SDL_Surface *surface, Sint16 x, Sint16 y, Uint32 color, Uint8 alpha)
void SPG_PixelPattern(SDL_Surface *surface, SDL_Rect target, bool* pattern, Uint32* colors)
void SPG_PixelPatternBlend(SDL_Surface *surface, SDL_Rect target, bool* pattern, Uint32* colors, Uint8* pixelAlpha)


// PRIMITIVES

void SPG_LineH(SDL_Surface *surface, Sint16 x1, Sint16 x2, Sint16 y, Uint32 Color)
void SPG_LineHBlend(SDL_Surface *surface, Sint16 x1, Sint16 x2, Sint16 y, Uint32 color, Uint8 alpha)

void SPG_LineV(SDL_Surface *surface, Sint16 x, Sint16 y1, Sint16 y2, Uint32 Color)
void SPG_LineVBlend(SDL_Surface *surface, Sint16 x, Sint16 y1, Sint16 y2, Uint32 color, Uint8 alpha)

void SPG_LineFn(SDL_Surface *surface, Sint16 X1, Sint16 Y1, Sint16 X2, Sint16 Y2, Uint32 Color, void Callback(SDL_Surface *Surf, Sint16 X, Sint16 Y, Uint32 Color))
void SPG_Line(SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 Color)
void SPG_LineBlend(SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color, Uint8 alpha)

void SPG_LineAA(SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)
void SPG_LineAABlend(SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color, Uint8 alpha)

void SPG_LineMultiFn(SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color1, Uint32 color2, void Callback(SDL_Surface *Surf, Sint16 X, Sint16 Y, Uint32 Color))
void SPG_LineMulti(SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color1, Uint32 color2)
void SPG_LineMultiBlend(SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color1, Uint8 alpha1, Uint32 color2, Uint8 alpha2)

void SPG_LineMultiAA(SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color1, Uint32 color2)
void SPG_LineMultiAABlend(SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color1, Uint8 alpha1, Uint32 color2, Uint8 alpha2)

void SPG_LineFade(SDL_Surface *dest,Sint16 x1,Sint16 x2,Sint16 y, Uint32 color1, Uint32 color2)
void SPG_LineTex(SDL_Surface *dest,Sint16 x1,Sint16 x2,Sint16 y,SDL_Surface *source,Sint16 sx1,Sint16 sy1,Sint16 sx2,Sint16 sy2)


void SPG_Rect(SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)
void SPG_RectBlend(SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color, Uint8 alpha)

void SPG_RectFilled(SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)
void SPG_RectFilledBlend(SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color, Uint8 alpha)


void SPG_EllipseFn(SDL_Surface *surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color, void Callback(SDL_Surface *Surf, Sint16 X, Sint16 Y, Uint32 Color))
void SPG_Ellipse(SDL_Surface *surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color)
void SPG_EllipseBlend(SDL_Surface *surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color, Uint8 alpha)

void SPG_EllipseFilled(SDL_Surface *surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color)
void SPG_EllipseFilledBlend(SDL_Surface *surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color, Uint8 alpha)

void SPG_EllipseAA(SDL_Surface *surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color)
void SPG_EllipseAABlend(SDL_Surface *surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color, Uint8 alpha)

void SPG_EllipseFilledAA(SDL_Surface *surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color)
void SPG_EllipseFilledAABlend(SDL_Surface *surface, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color, Uint8 alpha)


void SPG_CircleFn(SDL_Surface *surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color, void Callback(SDL_Surface *Surf, Sint16 X, Sint16 Y, Uint32 Color))
void SPG_Circle(SDL_Surface *surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color)
void SPG_CircleBlend(SDL_Surface *surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color, Uint8 alpha)

void SPG_CircleFilled(SDL_Surface *surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color)
void SPG_CircleFilledBlend(SDL_Surface *surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color, Uint8 alpha)

void SPG_CircleAA(SDL_Surface *surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color)
void SPG_CircleAABlend(SDL_Surface *surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color, Uint8 alpha)

void SPG_CircleFilledAA(SDL_Surface *surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color)
void SPG_CircleFilledAABlend(SDL_Surface *surface, Sint16 x, Sint16 y, Sint16 r, Uint32 color, Uint8 alpha)


void SPG_Bezier(SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2,Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint32 color)
void SPG_BezierBlend(SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2,Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint32 color, Uint8 alpha)

void SPG_BezierAA(SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2,Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint32 color)
void SPG_BezierAABlend(SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2,Sint16 x3, Sint16 y3, Sint16 x4, Sint16 y4, int level, Uint32 color, Uint8 alpha)


// POLYGONS

void SPG_Trigon(SDL_Surface *surface,Sint16 x1,Sint16 y1,Sint16 x2,Sint16 y2,Sint16 x3,Sint16 y3,Uint32 color)
void SPG_TrigonBlend(SDL_Surface *surface,Sint16 x1,Sint16 y1,Sint16 x2,Sint16 y2,Sint16 x3,Sint16 y3,Uint32 color, Uint8 alpha)

void SPG_TrigonAA(SDL_Surface *surface,Sint16 x1,Sint16 y1,Sint16 x2,Sint16 y2,Sint16 x3,Sint16 y3,Uint32 color)
void SPG_TrigonAABlend(SDL_Surface *surface,Sint16 x1,Sint16 y1,Sint16 x2,Sint16 y2,Sint16 x3,Sint16 y3,Uint32 color, Uint8 alpha)

void SPG_TrigonFilled(SDL_Surface *surface,Sint16 x1,Sint16 y1,Sint16 x2,Sint16 y2,Sint16 x3,Sint16 y3,Uint32 color)
void SPG_TrigonFilledBlend(SDL_Surface *surface,Sint16 x1,Sint16 y1,Sint16 x2,Sint16 y2,Sint16 x3,Sint16 y3,Uint32 color, Uint8 alpha)

void SPG_TrigonFade(SDL_Surface *surface,Sint16 x1,Sint16 y1,Sint16 x2,Sint16 y2,Sint16 x3,Sint16 y3,Uint32 color1,Uint32 color2,Uint32 color3)
void SPG_TrigonTex(SDL_Surface *surface,Sint16 x1,Sint16 y1,Sint16 x2,Sint16 y2,Sint16 x3,Sint16 y3,SDL_Surface *source,Sint16 sx1,Sint16 sy1,Sint16 sx2,Sint16 sy2,Sint16 sx3,Sint16 sy3)


void SPG_QuadTex(SDL_Surface *surface,Sint16 x1,Sint16 y1,Sint16 x2,Sint16 y2,Sint16 x3,Sint16 y3,Sint16 x4,Sint16 y4,SDL_Surface *source,Sint16 sx1,Sint16 sy1,Sint16 sx2,Sint16 sy2,Sint16 sx3,Sint16 sy3,Sint16 sx4,Sint16 sy4)


int SPG_PolygonFilled(SDL_Surface *surface, Uint16 n, Sint16 *x, Sint16 *y, Uint32 color)
int SPG_PolygonFilledBlend(SDL_Surface *surface, Uint16 n, Sint16 *x, Sint16 *y, Uint32 color, Uint8 alpha)

int SPG_PolygonFilledAA(SDL_Surface *surface, Uint16 n, Sint16 *x, Sint16 *y, Uint32 color)
int SPG_PolygonFilledAABlend(SDL_Surface *surface, Uint16 n, Sint16 *x, Sint16 *y, Uint32 color, Uint8 alpha)

int SPG_PolygonFade(SDL_Surface *surface, Uint16 n, Sint16 *x, Sint16 *y, Uint32* colors)
int SPG_PolygonFadeBlend(SDL_Surface *surface, Uint16 n, Sint16 *x, Sint16 *y, Uint32* colors, Uint8 alpha)

int SPG_PolygonFadeAA(SDL_Surface *surface, Uint16 n, Sint16 *x, Sint16 *y, Uint32* colors)
int SPG_PolygonFadeAABlend(SDL_Surface *surface, Uint16 n, Sint16 *x, Sint16 *y, Uint32* colors, Uint8 alpha)










